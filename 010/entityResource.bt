#include "common.bt"

#define kEntityResourceRev 0x11
#define kEntityRev 0x1E

LittleEndian();
typedef struct {
    int index : 12;
    int layer : 20;
} GameObjectId<read=GameObjectId_read>;
string GameObjectId_read(GameObjectId& t)
{
    local string result;
    SPrintf(result, "index %d layer %d", t.index, t.layer >> 4);
    return result;
}
typedef struct {
    enum {
        kFloat  = 0x0,
        kSignedChar = 0x1,
        kShort =  0x2,
        kInt    = 0x3,
        kLong   = 0x4,
        kByte   = 0x5,
        kUShort = 0x6,
        kUint32   = 0x7,
        kUint64   = 0x8,
        kBool   = 0x9,
        kGameObjectId = 0xA,
        kSymbol = 0xB,
        kResourcePath = 0xC,
        kColor = 0xD,
        kWaveform = 0xE,
        kStruct = 0xF,
        kDrivenProp = 0x10
    } data_type : 8;
    int is_array : 1;
} prop_type<read=prop_type_read>;
string prop_type_read(prop_type& t)
{
    local string result;
    SPrintf(result, "%s%s", EnumToString(t.data_type), t.is_array ? "[]" : "");
    return result;
}

typedef struct {
        PSTR name;
        prop_type type;
        if(type.is_array){
            int array_type;
        }
        if(type.data_type == kStruct){
            int64 refcount;
            int num_children;
            struct PropDef children[num_children]<optimize=false,read=prop_read>;
        }
} PropDef<read=prop_read>;
string prop_read(struct PropDef& p) {
    local string name;
    SPrintf(name, "%s:%s", p.name.name, prop_type_read(p.type));
    return name;
}
typedef struct propVal (struct PropDef& p) {
    local string name;
    SPrintf(name, "%s:%s", p.name.name, prop_type_read(p.type));
    if(p.type.is_array){
        int num_elements;
        if(num_elements != 0){
        switch(p.type.data_type){
            case kFloat:
                float floatVals[num_elements];
                break;
            case kInt:
                int intVals[num_elements];
                break;
            case kUint32:
                int flagVals[num_elements];
                break;
            case kUint64:
                int64 enumVals[num_elements];
                break;
            case kBool:
            case kByte:
                byte boolVals[num_elements];
                break;
            case kSymbol:
                PSTR symbolVals[num_elements] <optimize=false>;
                break;
            case kResourcePath:
                struct {
                    byte flag;
                    PSTR stringVal;
                } stringVals[num_elements] <optimize=false>;
                break;
            case kStruct:
                struct (struct PropDef& p) {
                    local int x = 0;
                    for(x = 0; x < p.num_children; x++){
                        struct propVal child(p.children[x]) <read=propVal_READ>;
                    }
                } structVals(p)[num_elements]<optimize=false>;
                break;
            case kDrivenProp:
                struct {
                    int64 unk_driven_prop_1;
                    PSTR propType;
                    int32 unk_driven_prop_2;
                    int64 unk_driven_prop_3;
                    PSTR propName;
                } drivenProps[num_elements] <optimize=false>;
                break;
            case kGameObjectId:
                struct {
                    int unk1;
                    int unk2;
                    int unk3;
                    int unk4;
                    int unk5;
                    int unk6;
                } gameObjectId[num_elements];
                break;
            default:
                int unkVal[num_elements];
                break;
        }
        }
    } else {
        switch(p.type.data_type){
            case kFloat:
                float floatVal;
                break;
            case kInt:
                int intVal;
                break;
            case kUint32:
                uint uintVal;
                break;
            case kUint64:
                uint64 ulongVal;
                break;
            case kBool:
                byte boolVal;
                break;
            case kByte:
                byte byteVal;
                break;
            case kSymbol:
                PSTR symbolVal;
                break;
            case kResourcePath:
                byte flag;
                PSTR stringVal;
                break;
            case kStruct:
                local int x = 0;
                for(x = 0; x < p.num_children; x++){
                    struct propVal child(p.children[x]) <read=propVal_READ>;
                }
                break;
            case kDrivenProp:
                int32 unk_driven_prop_1;
                int32 unk_driven_prop_2;
                if(unk_driven_prop_2 == 0){
                    PSTR propType;
                    int32 unk_driven_prop_2;
                    int64 unk_driven_prop_3;
                    PSTR propName;
                } else {
                    int32 unk1, unk2, unk3;
                }
                break;
            case kColor:
                float r, g, b, a;
                int unk1, unk2, unk3, unk4;
                break;
            default:
                int unkVal;
                break;
        }
    }
} PropVal<read=PropVal_READ>;
string PropVal_READ(PropVal& v)
{
  return v.name;
}
string propVal_READ(struct propVal& v)
{
  return v.name;
}

typedef struct (int objRev, int entityRev)
{
    PSTR name1;
    if(objRev >= 2) PSTR name2;
    int rev;
    Assert(rev > 1, "Unable to load old component");
    int propReg_field_80;
    int this_is_wrong;
    if(entityRev >= 0xE)
    {
        int count;
        local int i = 0;
        for(i = 0; i < count; i++)
        {
            PropDef defn;
        }
        for(i = 0; i < count; i++)
        {
            PropVal val(defn[i]);
        }
    }
} Component<read=COMPONENT_READ>;
string COMPONENT_READ(Component& c)
{
    return PSTR_READ(c.name1);
}
typedef struct (int entityRev)
{
    GameObjectId id;
    if (id.layer != 0xFFFFF && id.index != 0xFFF)
    {
        int obj_rev;
        if (obj_rev < 0)
        {
            char name;
        }
        else
        {
            PSTR name;
        }
        
        if(obj_rev >= 4 && name.strlen == 0)
        {
            int unk0, unk1, unk2, unk3;
        }
        else
        {
            int num_children;
            local int i = 0;
            for(i = 0; i < num_children; i++)
            {
                Component c(obj_rev, entityRev);
            }
        }
    }
} GameObject<read=GameObject_read>;
string GameObject_read(GameObject& go)
{
    if(go.id.layer == 0xFFFFF || go.id.index == 0xFFF)
    {
        return "(not present)";
    }
    if(go.obj_rev < 0)
    {
        return go.name;
    }
    return PSTR_READ(go.name);
}

typedef struct (int index, int entityRev) {
    int rev;

    Assert(rev >= 8, "version not >= 8");
    if(rev >= 0x17)
    {
        int unk;
    }
    int fileSlotIndex;
    //Assert(index == fileSlotIndex, "Layer failed to load - serialized for different slot");
    int16 field28;
    int arraySize;
    local int i = 0;
    local int v33 = 0;
    for(i = 0; i < arraySize; i++)
    {
	    // If these are uncommented then pretty much no RBSongs will parse
        //if (id.id.layer != index) Assert(false, "id.layer not == index");
        //if (i != id.id.index) Assert(false, "Failed to load game object");
        GameObject game_obj(rev);
    }
} EntityLayer;
struct EntityResource;
typedef struct {
    int version;
    if (version > kEntityRev)
    {
        Printf("Warning: Too new\n");
    }

    if(version <= 4)
    {
      PSTR symbol;
    }
    if(version >= 9)
    {
      int numLayers;
    }
    else
    {
        int rootId;
        if(version > 6)
        {
            int numLayers;
        }
        else
        {
            int16 array_size;
            if(version <= 1)
            {
              // Read GameObjectIdPropArray
                Assert(false, "Version <= 1");
            }
            local int numLayers = 1;
        }
    }

    local int li = 0;
    for (li = 0; li < numLayers; li++)
    {
        if (version < 8)
        {
          if (version >= 7)
          {
            int16 layer_field_28;
          }
          if (numLayers != 1)
          {
            Assert(false, "numLayers == 1");
          }
          int propArrayBaseSize;
          if (propArrayBaseSize > 0)
          {
            Assert(false, "Version < 8 loads objptrs here");
          }
        }
        else if ( version <= 11 )
        {
          PSTR layer_names;
        }
    }
    if (version < 8)
    {
        if (version >= 2)
        {
          Assert(false, "Version >= 2 < 8");
        }
    }
    else
    {
        for(li = 0; li < numLayers; li++)
        {
            EntityLayer layer(li, version);
            if(version > 0xC)
            {
                int inlineVersion;
                int inlineResourceCount;
                struct {
                    PSTR type;
                    PSTR name;
                    EntityResource resource;
                } inline[inlineResourceCount];
            }
        }
    }
} Entity;

typedef struct EntityResource {
    int version;
    if(version < 0xC || version > kEntityResourceRev)
    {
        //Assert(false, "Incompatible version");
    }
    int resourceLayerCount;
    PSTR resourceLayerNames[resourceLayerCount];
    if(version >= 0xF)
    {
        int unk0;
        if(version >= 0x11)
        {
            int unk1;
        }
    }
    Entity ent;
} EntityResource;

EntityResource file<open=true>;